error_log  stderr info;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

daemon off;
master_process off;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    upstream ng_rs_test{
        #upsync 127.0.0.1:8500/v1/kv/upstreams/ng_rs_test/ upsync_timeout=6m upsync_interval=500ms upsync_type=consul strong_dependency=off;
        #upsync_dump_path /home/lzb/nginx-master/build/conf/servers/servers_ng_rs_test.conf;
        #include /home/lzb/nginx-master/build/conf/servers/servers_ng_rs_test.conf;
        #check interval=1000 rise=2 fall=2 timeout=3000 type=http default_down=false;
        #check_http_send "HEAD / HTTP/1.0\r\n\r\n";
        #check_http_expect_alive http_2xx;

        hash $remote_addr consistent; # 根据该客户端的IP算出一个HASH值，将请求分配到集群中的某一台服务器上
        server 127.0.0.1:6379;
    }

    server {
        listen       8080;
        server_name  localhost;

        #access_log  logs/host.access.log  main;

        location / {
            proxy_pass http://ng_rs_test;
            #root   html;
            #index  index.html index.htm;
        }

    }

}

stream {
	# 后端指向 server 的 8001 端口 stream_backend 组
    upstream stream_backend {
        hash $remote_addr consistent; # 根据该客户端的IP算出一个HASH值，将请求分配到集群中的某一台服务器上
        server 127.0.0.1:6379;
		server 127.0.0.1:6380;
		# hash $request_uri; #按请求url的hash结果来分配请求，使每个url定向到同一个后端服务器，服务器做缓存时比较有效。
    }

    server {
	    # 本机监听端口 8000
        listen 7999;
        proxy_connect_timeout 5s;
        proxy_timeout 5s;
		# 请求抛给 stream_backend 组
        proxy_pass stream_backend;
    }
}
