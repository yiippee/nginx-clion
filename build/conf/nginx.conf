
####### 配置指令是一个字符串，可以用单引号或者双引号括起来，也可以不括。但是如果配置指令包含空格，一定要引起来。

####### 一个配置指令的参数全部由简单字符串构成，也就是不包含复合配置块，那么我们就说这个配置指令是一个简单配置项,下面这个是一个简单配置项：
error_log  stderr info;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

daemon off;
master_process off;

######## 复合配置块即是由大括号括起来的一堆内容。一个复合配置块中可能包含若干其他的配置指令。for example below:
events {
    worker_connections  1024;
}

#########  http 作用域
http {
    include       mime.types;
    default_type  application/octet-stream;


    # 这是在access.log 中打印日志内容和格式，可以打印很多内置或者自定义的变量值,比如defaultKey
    log_format  main  '"id": "$arg_id" '
                      '"url": "$uri" '
                      '"back_addr": "$upstream_addr" '
                      '"defaultKey": "$defurlkey" '
                      '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    upstream ng_rs_test{
        #upsync 127.0.0.1:8500/v1/kv/upstreams/ng_rs_test/ upsync_timeout=6m upsync_interval=500ms upsync_type=consul strong_dependency=off;
        #upsync_dump_path /home/lzb/nginx-master/build/conf/servers/servers_ng_rs_test.conf;
        #include /home/lzb/nginx-master/build/conf/servers/servers_ng_rs_test.conf;
        #check interval=1000 rise=2 fall=2 timeout=3000 type=http default_down=false;
        #check_http_send "HEAD / HTTP/1.0\r\n\r\n";
        #check_http_expect_alive http_2xx;

        #hash $remote_addr consistent; # 根据该客户端的IP算出一个HASH值，将请求分配到集群中的某一台服务器上
        hash $defurlkey consistent; # 根据url请求参数来hash定位到后台某一个服务

        server 127.0.0.1:26379;
        server 127.0.0.1:16379;
    }

    server {
        listen       8080;
        server_name  localhost;

        #access_log  logs/host.access.log  main;

        #if ( $request_uri ~* "^\/.*id=(.*)&.*" ){
           #set $defurlkey $1;
           set $defurlkey $arg_id; # 根据url中的参数id赋值defaultKey，那么后端则可以根据defaultKey做hash选择
        #}

        location / {
            #if ($args ~* "id=123") # 过滤某一个id的访问
            if ($arg_id = "123") # 可以直接做if判断啊
            {
                return 401;
            }

            #if ( $uri ~* "^\/([^\/]+)\/.*" ){
                #set $defurlkey $1;
            #}
            proxy_pass http://ng_rs_test;
            #root   html;
            #index  index.html index.htm;
        }

    }

#### -------------------------------------websocket------------------------------------------
    # proxy websocket
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    upstream websocket {
        #ip_hash;
        #转发到服务器上相应的ws端口

        hash $defurlkey; # 根据url请求参数来hash定位到后台某一个服务
        # hash $remote_addr;
        server localhost:8015;
        server localhost:3344;
        server localhost:8013;
    }
    server {
        listen 8081;
        server_name lzb;

        set $defurlkey $arg_id; # 根据url中的参数id赋值defaultKey，那么后端则可以根据defaultKey做hash选择

        location / {
            #转发到http://websocket
            proxy_pass http://websocket;
            proxy_read_timeout 300s;
            proxy_send_timeout 300s;

            proxy_set_header Host $host:$server_port;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            #升级http1.1到 websocket协议
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection  $connection_upgrade;
        }
    }

}

stream {
	# 后端指向 server 的 8001 端口 stream_backend 组
    upstream stream_backend {
        #hash $remote_addr consistent; # 根据该客户端的IP算出一个HASH值，将请求分配到集群中的某一台服务器上
        server 127.0.0.1:6379;
		#server 127.0.0.1:6380;
		#hash $request_uri; #按请求url的hash结果来分配请求，使每个url定向到同一个后端服务器，服务器做缓存时比较有效。
    }

    server {
	    # 本机监听端口 8000
        listen 7999;
        proxy_connect_timeout 5s;
        proxy_timeout 5s;
		# 请求抛给 stream_backend 组
        proxy_pass stream_backend;
    }

}
